from unittest import TestCase

from numpy import array, array_equal

from molecular_structure.molecular_structure import (get_partial_charges, get_structure_coordinates, make_list_of_atoms)
from tests.helper_functions import build_path


class TestMolecularStructure(TestCase):

    def setUp(self):

        # Set up the list of charges.
        self.coordinates_file = build_path('anion_spherical_geometry.xyz')
        self.charge_file = build_path('anion_spherical_charges')

    def test_make_list_of_atoms(self):
        """
        Test making a list of atoms.
        """

        atoms = make_list_of_atoms(self.coordinates_file, self.charge_file)

        self.assertTrue(array_equal(atoms[0].coord, array([+0.298014669384130, +0.94778051705805, +0.53444632796299])))
        self.assertEqual(atoms[0].charge, -0.88709616)
        self.assertEqual(atoms[0].index, 0)

        self.assertTrue(array_equal(atoms[1].coord, array([+4.529788643126640, +0.52424446466811, -2.53435972314979])))
        self.assertEqual(atoms[1].charge, -0.21195503)
        self.assertEqual(atoms[1].index, 1)

        self.assertTrue(array_equal(atoms[2].coord, array([+10.81694114401703, -2.30439287688379, -1.45431013552853])))
        self.assertEqual(atoms[2].charge, -0.41847107)
        self.assertEqual(atoms[2].index, 2)

    def test_get_partial_charges(self):
        """
        Tests obtaining the atom charges.
        """

        partial_charges = [
            -0.88709616, -0.21195503, -0.41847107, -0.38031091, -0.49555948, -0.49436960, -0.48893715, -0.49083401,
            -0.48407751, -0.49189877, -0.48760666, -0.48552606, -0.15361548, -0.15066783, -0.14647628, -0.16396842,
            -0.16883810, -0.15804390, -0.16400409, -0.15562230, -0.15778187, -0.16076417, -0.15569994, -0.16231772,
            -0.14887886, -0.16700463, -0.15124292, -0.16357202, +0.36308369, -0.09000499, -0.06157130, -0.05795460,
            -0.01080725, -0.05566099, -0.06002296, -0.06254585, -0.05989454, -0.06070020, -0.06742232, -0.05817150,
            -0.06734105, -0.06214438, -0.06614786, -0.06038922, -0.05433982, -0.05965962, -0.05974920, -0.06255915,
            -0.06784357, -0.05383913, -0.06281110, -0.05650762, +0.04833758, -0.06603308, -0.06993650, +0.04470253,
            -0.06061300, -0.06320773, -0.06083983, -0.06542622, +0.04890818, +0.32184949, +0.08639849, +0.08566495,
            +0.04863873, +0.32280553, -0.06765395, +0.07937053, +0.32329466, +0.32178694, +0.08103545, -0.06370449,
            -0.06984350, +0.04513522, +0.05361355, +0.32297738, +0.32414165, +0.32594242, +0.05131760, +0.08440453,
            +0.04360549, +0.08565740, +0.04716024, +0.32339017, +0.04639278, +0.07918012, +0.04784982, +0.08479300,
            +0.04559013, +0.04844615, +0.03736659, +0.04481940, +0.01735353, +0.04522020, -0.06302470, +0.32114181,
            +0.06556794, +0.06895672, +0.04443113, +0.07526586, +0.04817177, +0.02788422, +0.03963762, +0.03638646,
            +0.04302465, +0.06160692, +0.06223233, +0.03242536, +0.04490684, +0.04438960, +0.03701697, +0.03406936,
            +0.04414565, +0.03225715, +0.04049341, +0.03459670, +0.05758429, +0.02632672, +0.04796868, +0.03492474,
            +0.05701237, +0.02661399, +0.06819746, +0.06982666, +0.04139155, +0.05635688, +0.02915701, +0.03771732,
            +0.02209282, +0.05071912, +0.02916922, +0.06038819, +0.02958897, +0.04510599, +0.03754078, +0.04740619,
            +0.06298674, +0.02145727, +0.03798424, +0.07170651, +0.04446023, +0.02403835, +0.03677505, +0.03306103,
            +0.07476774, +0.04942405, +0.03480226, +0.06867874, +0.02378651, +0.02836958, +0.04479440, +0.03315165,
            +0.07247314, +0.03206688, +0.04168885, +0.03006042, +0.05772980, +0.03323565, +0.05588218, +0.05881657,
            +0.05783623, +0.05730143, +0.03351135, +0.04774532, +0.06234370, +0.07120964, +0.07066247, +0.06886213,
            +0.06796249, +0.02771861, +0.05669077, +0.03459946, +0.06884717, +0.02390206, +0.05702834, +0.01518459,
            +0.05892867, +0.07156903, +0.05878798, +0.05905497, +0.05892342, +0.01842679, +0.07141826, +0.07091618,
            +0.01591078, +0.06269852, +0.06137992, +0.05411079, +0.03255669, +0.06879709, +0.02324439, +0.02387673,
            +0.07366602, +0.02996247, +0.07174827]

        for charge_a, charge_b in zip(get_partial_charges(self.charge_file), partial_charges):
            self.assertEqual(charge_a, charge_b)

    def test_get_structure_coordinates(self):
        """
        Tests registering the molecular coordinates for a Cartesian coordinates file.
        """

        coordinates = [
            [+0.298014669384130, +0.947780517058050, +0.534446327962990],
            [+4.529788643126640, +0.524244464668110, -2.534359723149790],
            [+10.81694114401703, -2.304392876883790, -1.454310135528530],
            [+9.915415486431840, -2.224126046029090, -3.486641198547360],
            [+4.908344647899960, -2.903483522421800, +0.727471377757100]
        ]

        for coordinates_a, coordinates_b in zip(coordinates, get_structure_coordinates(self.coordinates_file)[1][:6]):
            self.assertTrue(array_equal(coordinates_a, coordinates_b))

        with self.assertRaises(FileNotFoundError):
            get_structure_coordinates('faulty_file_path.xyz')
